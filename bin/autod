#!/usr/bin/env node

/*!
 * autod - bin/autod.js
 * Copyright(c) 2013
 * Author: dead_horse <dead_horse@qq.com> (http://deadhorse.me)
 */

'use strict';

/**
 * Module dependencies.
 */

var program = require('commander');
var autod = require('../');
var util = require('util');
var resolve = require('path').resolve;
var pjoin = require('path').join;
var fs = require('fs');
var printable = require('printable');
var color = require('colors');
var minimatch = require("minimatch");

var argv = program
  .version(require('../package.json').version)
  .option('-p, --path [folder path]', 'the folder path to be parse', '.')
  .option('-t, --test <test folder path>', 'the test folder path to be parse', 'test')
  .option('-e, --exclude <exclude folder path>', 'exclude parse folder, split by `,`')
  .option('-r, --registry <remote registry>', 'get latest version from which registry', 'http://registry.npm.taobao.org')
  .option('-f, --prefix [version prefix]', 'version prefix, can be `~` or `^`')
  .option('-w, --write', 'write dependencies into package.json')
  .option('-i, --ignore', 'ignore errors, display the dependencies or write the dependencies.')
  .option('-m, --map', 'display all the dependencies require by which file')
  .option('-d, --dep <dependence modules>', 'modules that not require by file, but you really need them')
  .option('-k, --keep <dependencies modules>', 'modules that you want to keep version in package.json file')
  .option('-a, --arbitrary [dependence type]', 'ignore the devDependencies module, if it is set to `*`, can be `dev`')
  .parse(process.argv);

if (argv.prefix && argv.prefix !== '~') {
  argv.prefix = '^';
}

function outputDep(name, values) {
  var str = util.format('  "%s": {\n', name);
  var deps = [];
  for (var key in values) {
    deps.push(util.format('    "%s": "%s"', key, values[key]));
  }
  str += deps.sort().join(',\n') + '\n  }';
  return str;
}

function output(result) {
  var str = outputDep('dependencies', result.dependencies);
  if (!Object.keys(result.devDependencies).length) {
    return str;
  }
  str += ',\n' + outputDep('devDependencies', result.devDependencies);
  return str;
}

function printUpdates(title, latest, old, remove) {
  latest = latest || {};
  old = old || {};
  var arr = [['Package Name', 'Old Version', 'Latest Version']];
  for (var key in latest) {
    if (!old[key]) {
      arr.push([key, '-', latest[key]]);
    } else if (old[key] !== latest[key]) {
      arr.push([key, old[key], latest[key]]);
    }
  }
  if (remove) {
    for (var key in old) {
      if (!latest[key]) {
        arr.push([key, old[key], 'remove']);
      }
    }
  }
  if (arr.length > 1) {
    console.log((title + ' updates').yellow + '\n');
    console.log(printable.print(arr));
    console.log();
  } else {
    console.log(('nothing to update in ' + title).green + '\n');
  }
}

function comparePackage(result) {
  var pkgInfo;
  var pkgStr;
  var pkgExist = true;
  var pkgPath = pjoin(resolve(argv.path), 'package.json');

  // add prefix
  if (argv.prefix) {
    for (var key in result.dependencies) {
      result.dependencies[key] = argv.prefix + result.dependencies[key];
    }
    for (var key in result.devDependencies) {
      result.devDependencies[key] = argv.prefix + result.devDependencies[key];
    }
  }

  try {
    pkgInfo = require(pkgPath);
    pkgStr = fs.readFileSync(pkgPath, 'utf-8');
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      pkgInfo = {};
      pkgExist = false;
    } else {
      console.log(output(result));
      console.error('`package.json` parsed error: %s', err.message);
      process.exist(1);
    }
  }

  if (!pkgExist) {
    console.log(output(result));
    if (argv.write) {
      console.log('[WARN]'.yellow + ' `package.json` not exist, auto generate and write dependencies.');
      fs.writeFileSync(pkgPath, '{\n' + output(result) + '\n}\n', 'utf-8');
    }
    process.exit(0);
  }

  if (pkgInfo.dependencies) {
    // keep these modules version, won't change by autod
    if (argv.keep) {
      argv.keep.split(',').forEach(function (key) {
        for (var pkgKey in pkgInfo.dependencies) {
          if (minimatch(pkgKey, key)) {
            result.dependencies[pkgKey] = pkgInfo.dependencies[pkgKey];
          }
        }

        for (var pkgKey in pkgInfo.devDependencies) {
          if (minimatch(pkgKey, key)) {
            result.devDependencies[key] = pkgInfo.devDependencies[key];
          }
        }
      });
    }
    pkgStr = pkgStr.replace(/( |\t)*"dependencies"\s*:\s*{(.|\n)*?}/,
      outputDep('dependencies', result.dependencies));
  } else {
    pkgStr = pkgStr.replace(/(\s*)(\}\n*\s*)$/, function (end, before, after) {
      return ',' + before + outputDep('dependencies', result.dependencies) + '\n' + after;
    });
  }

  if (pkgInfo.devDependencies) {
    //merge parsed into devDependencies
    for (var key in pkgInfo.devDependencies) {
      if (!result.devDependencies[key]) {
        result.devDependencies[key] = pkgInfo.devDependencies[key];
      }
      if (argv.arbitrary && argv.arbitrary === 'dev' && pkgInfo.devDependencies[key] === '*') {
        result.devDependencies[key] = '*';
      }
    }
    pkgStr = pkgStr.replace(/( |\t)*"devDependencies"\s*:\s*{(.|\n)*?}/,
      outputDep('devDependencies', result.devDependencies));
  } else {
    pkgStr = pkgStr.replace(/(\s*)(\}\n*\s*)$/, function (end, before, after) {
      return ',' + before + outputDep('devDependencies', result.devDependencies) + '\n' + after;
    });
  }
  console.log(output(result));
  printUpdates('Dependencies', result.dependencies, pkgInfo.dependencies, true);
  printUpdates('DevDependencies', result.devDependencies, pkgInfo.devDependencies);
  if (argv.write) {
    console.log('[INFO]'.green + ' Write dependencies into package.json.');
    fs.writeFileSync(pkgPath, pkgStr, 'utf-8');
  }
  process.exit(0);
}

autod({
  registry: argv.registry,
  exclude: argv.exclude && argv.exclude.split(/\s*,\s*/),
  dep: argv.dep && argv.dep.split(/\s*,\s*/),
  root: argv.path,
  testRoot: argv.test
}).parse(function (err, result) {
  if (err) {
    console.error('[ERROR]'.red, err.message);
    err.errorMap && console.log('[ERROR]'.red + ' Error packages path map:\n',
     util.inspect(err.errorMap, {depth: 3, colors: true}));
    if (!argv.ignore) {
      process.exit(1);
    }
  }
  console.log('\n[DEPENDENCIES]\n'.green);
  comparePackage(result);
  if (argv.map) {
    console.log('\n[DEPENDENCY MAP]\n'.green);
    console.log(util.inspect(result.map, {depth: 3, colors: true}));
  }
}).on('warn', function (msg) {
  console.warn('[warn] '.yellow, msg);
  process.exit(0);
});
